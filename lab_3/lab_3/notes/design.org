* Top Level

** Stopwatch

*** Inputs

| Name     | Assigned Port | Description                            | Requirements                                            |
|----------+---------------+----------------------------------------+---------------------------------------------------------|
| Select   | switch[?]     | Choose min(0) or sec(1) in adjust mode |                                                         |
|----------+---------------+----------------------------------------+---------------------------------------------------------|
| Adjust   | switch[?]     | Enter (1) of Stop (0) adjust mode      | Normal increment stops in adj mode                      |
|          |               |                                        | Selected portion blinks in adj mode                     |
|          |               |                                        | Select portion /increments/ at 2Hz in adj mode          |
|          |               |                                        | Unselected portion is "frozen"(does not blink)          |
|----------+---------------+----------------------------------------+---------------------------------------------------------|
| Pause    | button[?]     |                                        | Pause and resume counter on press                       |
|          |               |                                        | Must be debounced                                       |
|----------+---------------+----------------------------------------+---------------------------------------------------------|
| Reset    | button[?]     |                                        | Force all counters to initial state (00:00)             |
|          |               |                                        | Must be debounced                                       |
|----------+---------------+----------------------------------------+---------------------------------------------------------|
| *Clock*  | clk           | Clock from Nexys 3 board               | Needs to be divided into the following:                 |
| 1Hz      | ?             | To increment stopwatch                 |                                                         |
| 2Hz      | ?             | To increment in adj mode               |                                                         |
| >2Hz     | ?             | For pulsing 7-segment in adjust mode   |                                                         |
| 50-700Hz | ?             | For multiplexing the 7-segment         | Need to determine proper refresh rate (probably ~100Hz) |
| 100Mhz   | clk           | Standard clock                         |                                                         |
|----------+---------------+----------------------------------------+---------------------------------------------------------|

*** Outputs

| Name            | Assigned Port | Description                        | Requirements                                        |
|-----------------+---------------+------------------------------------+-----------------------------------------------------|
| 7 Segment       | seg[6:0]      | 7 segment display for clock output |                                                     |
|-----------------+---------------+------------------------------------+-----------------------------------------------------|
| *Common Annode* | digit[3:0]    | Common annode for 7 segment        | Annode must be sequenced to display coherent digits |
| Min-tens        | digit[3]      |                                    |                                                     |
| Min-units       | digit[2]      |                                    |                                                     |
| Sec-tens        | digit[1]      |                                    |                                                     |
| Sec-units       | digit[0]      |                                    |                                                     |
|-----------------+---------------+------------------------------------+-----------------------------------------------------|


*** State
| Name   | Behavior                 | State | Assignment      |
|--------+--------------------------+-------+-----------------|
| Select | Choose min or sec        |     0 | Minutes         |
|        |                          |     1 | Seconds         |
|--------+--------------------------+-------+-----------------|
| Adjust | Enter or exit adj mode   |     0 | Normal behvaior |
|        |                          |     1 | Adjust mode     |
|--------+--------------------------+-------+-----------------|
| Pause  | Pause or resume on press |     0 | Pause Clock     |
|        |                          |     1 | Resume Clock    |
|--------+--------------------------+-------+-----------------|
| Reset  | Reset stopwatch          |     0 | Normal Behavior |
|        |                          |     1 | Reset Clock     |
|--------+--------------------------+-------+-----------------|



* Organization of Modules

** Notes about the 7-Segment Display
Using the bottom up approach, the register that contains the data for the 7-segment display is
housed in the ~decoder~ module, and the register that contains the data for the common-anode,
i.e., the ~digit~ output, is housed in the ~display_7_seg~ module. Hence, both ~seg~ and 
~digit~ are wires in the top-level ~stopwatch~ module, since they already have corresponding
regs.

Since the ~display_7_seg~ module takes in 4x 4-bit wires for units, tens, etc... but the 
corresponding counter modules either output 3-bit or 4-bit signals, I padded the 3-bit signals
with a 0 bit in the form of a vector ~{1'b0, time_[2:0]}~, etc. This was probably not 100% 
necessary, but I figured it would be good to make sure we never get a rouge 1 in the MSB
of those 3-bit counters.


** Notes about the Timer Sequencer
The ~timer_seq~ module has 4 internal counters, one for each digit of the stopwatch.
The counters are daisy chained together, such that when the lower order counter transitions
from max state to min state (i.e. 5->0 or 9->0), the transition signal ~o_transition~ 
becomes the ~clk_en~ signal for the next higher order counter. This is effectively
how state is handled. Neither counter module needs to be aware of the adjacent counters,
yet they are all synchronized.

*** Pause and Reset buttons
Both pause and reset are debounced, but only reset requires use of both down transition and state
(from the debounce module), since if reset is briefly pushed, we want to reset, but also if reset 
is held down, the timer should reset back to 0000 continuously until reset is let go. Therefore,
the reset input to the ~timer_seq~ module is the down transition OR'd with the state, so that either
will trigger the timer to reset.
